version: '3'

services:
  app:
    build:
      context: .
    restart: unless-stopped
    deploy:
      replicas: 3

    env_file:
      - ./.env.dev
    depends_on:
      - db

  db:
    image: postgres:10-alpine
    restart: unless-stopped
    env_file:
      - ./.env.dev
    volumes:
      - pgdata:/var/lib/postgresql/data
  redis:
    image: redis:alpine

  nginx:
      build:
        context: .
        dockerfile: DockerfileNginx
      restart: unless-stopped
      ports:
      - "80:80"

volumes:
  pgdata:
  
  
  # Nginx Configurations
  
upstream loadbalancer {
server app:8000;
}
  
  
server {
       listen 80;
       server_name api.cloudgeeks.ca;
       
        location / {
            proxy_pass http://loadbalancer;
            proxy_read_timeout 300;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            auth_basic off;
        }
}
  
  
  
  # Command
  # https://docs.docker.com/compose/cli-command-compatibility/
  
  docker-compose --compatibility up -d --build
  
  docker-compose up -d --scale app=6 --no-recreate --build
 
 # Sample
 # docker-compose --env-file docker.env up -d --scale app=6 --no-recreate
  
  
  
  # Image Tagging
  
  version: '3'

services:
  app:
    image: cloudgeeks:ca
    build:
      context: .
    restart: unless-stopped
    deploy:
      replicas: 3

    env_file:
      - ./.env.dev
    depends_on:
      - db

  db:
    image: postgres:10-alpine
    restart: unless-stopped
    env_file:
      - ./.env.dev
    volumes:
      - pgdata:/var/lib/postgresql/data
  redis:
    image: redis:alpine

  nginx:
      build:
        context: .
        dockerfile: DockerfileNginx
      restart: unless-stopped
      ports:
      - "80:80"

volumes:
  pgdata:
  
  
  
   # Image Tagging & Container Name
  
  version: '3'

services:
  app:
    image: cloudgeeks:ca
    build:
      context: .
    restart: unless-stopped
    deploy:
      replicas: 3

    env_file:
      - ./.env.dev
    depends_on:
      - db

  db:
    image: postgres:10-alpine
    container_name: postgres
    restart: unless-stopped
    env_file:
      - ./.env.dev
    volumes:
      - pgdata:/var/lib/postgresql/data
  redis:
    image: redis:alpine

  nginx:
      build:
        context: .
        dockerfile: DockerfileNginx
      container_name: nginx  
      restart: unless-stopped
      ports:
      - "80:80"

volumes:
  pgdata:
  
  
