# https://gowebexamples.com/hello-world/

docker run --name gowebapp -p 80:80 -id quickbooks2018/goapp:v1


Go Application
---------------
web.go
-------
package main

import (
    "fmt"
    "net/http"
)

func main() {
    http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintf(w, "Hello from cloudgeeks.ca")
    })

    http.ListenAndServe(":80", nil)
}



Dockerfile
----------
FROM golang:alpine

# Set the Current Working Directory inside the container
WORKDIR /usr/src/goapp

# Copy everything from the current directory to the PWD (Present Working Directory) inside the container
COPY web.go /usr/src/goapp/web.go


# This container exposes port 8080 to the outside world
EXPOSE 80

# Run the executable
CMD ["go","run","web.go"]

# Kubernetes
goapp
------

goapp.yaml


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: goapp
  labels:
    app: goapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: goapp
      tier: frontend
  template:
    metadata:
      labels:
        app: goapp
        tier: frontend
    spec:
      containers:
      - image: quickbooks2018/goapp:v1
        imagePullPolicy: Always
        name: goapp
        ports:
        - containerPort: 80
          name: http
        resources:
          limits:
            cpu: 500m
            memory: 1024Mi
          requests:
            cpu: 500m
            memory: 1024Mi
---
apiVersion: v1
kind: Service
metadata:
  name: goapp
  labels:
    app: goapp
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app: goapp
    tier: frontend
  type: NodePort
